1 page summary

 

[ArrayList]

배열과 리스트의 장점만을 모아둔 것

배열과 다르게 크기를 지정할 필요가 없고 따라서 데이터의 추가, 삭제, 끼워넣기가 편하다

형식

ArrayList<데이터형>
변수명 = new ArrayList<데이터형>();

데이터형에는 클래스명이 들어가야 한다 따라서 정수는 Integer, 실수는 Double로 작성한다

ex)

ArrayList<String> s = new ArrayList<String>();
//s는 String형 데이터를 담는 참조 변수

 

[제네릭(Generic)]

일반적인 코드를 작성하고 이 코드를 다양한 타입의 객체에 대해 재사용하는 프로그래밍 기법

신발장(신발만 담음), 냉장고(음식만 담음) 만들기라고 생각하면 쉽다

형식

클래스 또는 인터페이스 뒤에 <T>를 붙인다, <T>를 제네릭 타입이라 부른다.

T는 담을 클래스명(데이터형)을 적으면 된다

T와 일치하지 않는 데이터형은 자동으로 담을 수 없기에 런타임 에러가
나는 것을 방지할 수 있고 

T를 사용하지 않을 경우 데이터를 꺼내 사용할 때 일일이 타입 변환을 하지
않아도 된다

ex)

public class Box{

private Object object;

public void set(Object object) {

this.object = object;

}

public Object get(){

return this.object

}

-> 박스 클래스에 제네릭 타입 <T>를 사용하지 않았으므로 모든 클래스의 객체들을 담을 수 있다. 

꺼내서
쓸 때마다 강제 형변환을 해줘야 한다 -> 비효율적

 

public class Box<T>{

private T object;

public void set(T object) {

this.object = object;

}

public T get(){

return this.object

}

-> Box<String> s1 = new
Box<String>(); 처럼 타입 파라미터를 사용해 특정 데이터형만 담을 수 있다.

제네릭 타입은 콤마로 여러개로 작성할 수도 있다

ex)

public class Box<T, M> { }

Box<Tv, String> s1 = new Box <Tv,
String>(); // Tv 객체와 String 객체를 담는 박스

 

[제네릭 메소드]

매개변수 타입과 리턴 타입으로 타입 파라미터 <T>를
갖는 메소드

형식

public <타입파라미터,...>
리턴타입 메소드명(매개변수,...){}

ex)

public <T> Box<T> boxing(T t){}
// 타입 파라미터 = T, 리턴타입 Box<T>

(클래스명.)<T>메소드명(매개변수); 형식으로 호출한다

ex)

<Integer>boxing(100);

String last = Array.<String>getLast(language);

 

[타입 파라미터 제한]

<T extends 상위타입>
// 상위 제한

: 상속관계에 있을 때 상위클래스와 하위클래스 타입의 객체만 생성할
수 있다

ex)

public Box <T extends 동물> {}

Box<동물> box1
= new Box<동물>(); //가능

Box<강아지> box2
= new Box<강아지>(); //가능

Box<자동차> box3
= new Box<자동차>(); //불가능

 

<T super 하위타입>
//하위 제한

: 상속관계에 있을 때 하위클래스와 상위클래스 타입의 객체만 생성할
수 있다

 

제네릭 타입의 상속

제네릭 타입이 상위 클래스일 경우 하위 클래스에도 타입 파라미터 명시, 추가
가능, 인터페이스도 마찬가지



[컬렉션]

배열의 단점을 보완한 것들 - list, stack, queue, set, hash table 등

집합 set은 중복원소가 불가능

컬렉션 클래스와 인터페이스로 제공한다



리스트는 List<T> a = new ArrayList<T>(); 형식으로도 업캐스팅 가능

주요 메소드들

size() // 원소의 개수 리턴

isEmpty() // 원소가 0개이면 true 리턴

add(E element) //원소 추가

remove(Object obj) //원소 삭제