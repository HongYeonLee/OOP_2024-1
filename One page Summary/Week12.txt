String 클래스들의 메소드

1. char charAt(int index) - 매개변수로 주어지는
인덱스에 해당하는 문자 값 리턴

ex)

String s = “abcd”;

char c = s.charAt(1); // c는 b

 

2. int compareTo(String anotherString) - 두
개의 스트링을 사전 순으로 비교해 같으면 0, 현재 스트링이 비교 스트링 보다 먼저 나오면 음수, 아니면 양수 리턴

ex)

String s1 = “감자피자”;

String s2 = “치킨”;

int result = s1.compareTo(s2); //감자피자가
치킨보다 사전에서 먼저 나오므로 음수 리턴

 

3. String concat(String str) - 현재 스트링
뒤에 str 스트링을 덧붙인 새로운 스트링 리턴

ex)

String s1 = “내 이름은 ”;

String s2 = s1.concat(“이홍연”); //s2는 “내 이름은 이홍연”

print문에서 + 연산자가
있을 때, 피연산자가 문자열이 아니면 toString()을
이용해 문자열로 리턴, concat을 이용해 이어 붙인 후 출력

 

4. String trim() - 스트링 앞 뒤의 공백 문자를 제거한
스트링 리턴

String s1 = “     abcd efg 
“;

String s2 = “     xyz\t”;

String s3 = s1.trim(); // s3는 “abcd efg”, 중간에 있는 공백은 제거되지 않는다

String s4 = s2.trim(); // s4는 “xyz”, \t도 제거된다

 

5. String replace(String target, String replace);
//현재 스트링에서 target 부분을 replace로
대체

ex)

String s1 = “내 이름은 김초코”;

String s2 = s1.replace(“김초코”, “이초코”); // s2는 “내
이름은 이초코”

 

6. String[] split(String regularExpression);
//정규식(구분문자열)을 기준으로 하여 문자열을
분리한 뒤 배열로 리턴

ex)

String s1 = “사과/배/딸기/망고”;

String[] s2 = s1.split(“/”); //s2[0] = 사과, s2[1] = 배, s2[2] = 딸기, s2[3] = 망고

 

7. String subString(int beginIndex) // beginIndex에
해당하는 문자열부터 끝까지의 부분 문자열 리턴

ex)

String s1 = “abcdefg”;

String s2 = s1.subString(4); //s2는 “efg”

 

1 page summary

[Object 클래스]

-java.lang 패키지에 포함되있다

-모든 클래스의 상위 클래스이다

주요 메소드

equals() - 객체를 비교해 같으면 true 리턴

getClass() - 현재 객체의 클래스를 리턴

hashCode() - 현재 객체의 해시 코드 값을 리턴

toString() - 현재 객체를 문자열 표현으로 리턴

== 연산자는 가리키는 위치(레퍼런스)가 같은지 묻는 것이고 equals()는 가리키는 대상의 내용물이
같은지 묻는 것이다

 

[Wrapper 클래스]

기본 타입과 Wrapper 클래스

byte - Byte

short - Short

int - Integer

long - Long

char - Character

float - Float

double - Double

boolean - Boolean

Wrapper 클래스를 이용하면 기본 데이터 타입들을 감싸는 형태로
클래스가 생성된다고 생각하면 된다. 기본 데이터 타입 변수를 담고 있는 Wrapper 클래스의 객체를 리턴한다.

Wrapper클래스명.valueOf(값); 형식으로 사용

Wrapper 클래스들의 메소드들은 대부분 static이라 Wrapper클래스명. 형식으로 객체를 생성하지 않고 바로 사용할 수 있다

Integer 클래스의 주요 메소드
(Integer.메소드명() 으로 사용)

parseInt(String s) - 문자열 -> 정수로 변환

toString(int i) - 정수 -> 문자열로 변환

intValue() - 정수값으로 리턴

ex)

Integer i = Integer.valueOf(10); //박싱, Integer i = 10으로 해도 자동 박싱이 된다

int ii = i.intVaule(); //언박싱, int ii = i를 해도 자동 언박싱이 된다

int a = Integer.parseInt(“123”); //문자열 123을 정수 123으로 변환

 

[String 클래스]

java.lang 패키지에 포함되있다 - java.lang.String

배열을 이용하지 않고 하나의 문자열로 표현할 수 있다

클래스이므로 생성자를 이용해 스트링을 만들 수도 있다

String(char[] value) - char 배열에 있는 문자들을
스트링 객체로 생성

String(String original) - 매개변수로 주어진 문자열과
동일한 스트링 객체 생성

 

스트링 리터럴과 생성자로 만들기

String s = “Hello”; //스트링 리터럴로 생성, == 연산자 값과 equals() 값 동일

String s = new String(“Hello”); //String 생성자로
객체 생성, equlas() 값은 같으나 == 연산자 값은
다름



스트링을 비교할 때는 반드시 equals()를 이용한다

메소드는 위에 작성한 것 참조

 

[StringBuffer 클래스]

java.lang 패키지에 포함되있다 - java.lang.StringBuffer

String 클래스와 달리 문자열 변경이 가능하다

ex)

StringBuffer s1 =
new StringBuffer(“abcd”);

 

주요 메소드

StringBuffer append(String(또는 StringBuffer) str) //덧붙이기

StringBuffer delete(int start, int end)
//start위치에서 end 위치 앞까지 부분 문자열 삭제

StringBuffer insert(int offset, String str)
//str 스트링을 스트링 버퍼의 offset 위치에 삽입

StringBuffer replece(int start, int end,
String str) //스트링 버퍼 내의 start 위치의 문자부터 end가 지정하는 문자 앞의 부분 문자열을 str이 대체

 

[StringTokenizer 클래스]

java.util 패키지에 포함되있다 - java.util.StringTokenizer

하나의 문자열을 구분 문자를 이용하여 여러개의 토큰(문자열)로 분리할 수 있다

split()과 다르게 배열을 리턴하는게 아니라 StringTokenizer가 토큰(=구분 문자로 분리된 문자열)을 가지고 있다.

split()과 다르게 구분 문자열을 여러개 작성하여 한번에 분리할
수 있다

주요 메소드

int countToken() //분리한 토큰의 개수 리턴

boolean hasMoreTokens() //다음 토큰이 있으면 true 리턴

String nextToken() //다음 토큰 리턴

 

ex)

Strings s = "사과/바나나/망고=포도=딸기=오렌지*메론*참외*";

StringTokenizer st = new StringTokenizer(s,
"/=*"); //문자열과 구분문자열을 한번에 줄 수있다, 구분문자는
여러개 가능!!

 

while (st.hasMoreTokens()) //st야 남아있는
토큰 있어?

           System.out.println(st.nextToken());
// 있으면 다음거 출력해줘

