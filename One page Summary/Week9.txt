1 page summary

[Static]
-모두가 사용하는 것, 하나 만들어서 다들 공유해서 쓰는 것 ex) main 함수, Math 함수의 멤버들 (Math. 하고 바로쓰기)
-객체화하지 않고 그대로 쓸 수 있다, new로 생성하지 않는다
-메모리 static 영역에 만들어져 공유된다
-객체마다 생기는 것이 아니다
-static 멤버는 클래스 당 하나만, 클래스가 로딩될 때 static 공간에 할당, 동일한 클래스의 모든 객체에게 공유된다

ex)
test 클래스에
non-static 멤버인 a 변수, b 함수가 있다
static 멤버인 c 변수, d 함수가 있다

non-static 멤버를 사용할 때는
test 객체명 = new test() 후
객체명.a 또는 객체명.b() 

static 멤버를 사용할 때는
test.c 또는 test.d() 처럼 객체를 생성하지 않고 바로 사용할 지 있다

따라서 static 멤버(static 변수나 static 함수)는 단 한번만 생성되므로
어떤 객체가 단 한번만 생성되게 하려면 싱글톤으로 구현한다

[싱글톤 = Singleton]
-단 한번만 생성되도록 만든 객체
-스택 영역의 수많은 변수들이 싱글톤 객체를 여러번 가리켜도
-힙 영역에 생성된 싱글톤 객체 단 1개만을 가리킨다

-생성방법
-외부에서 new 연산자로 생성자를 호출할 수 없도록 막아야 하므로 private를 생성자 앞에 붙인다
-싱글톤 객체가 생성되었는지 확인하는 변수를 만들어야 하므로
-클래스 자신의 타입으로 정적 변수를 선언하고 private로 선언해 외부에서 변수 값을 변경하지 못하도록 한다
-정적 메소드 getInstance()를 선언하여 외부에서 싱글톤 객체에 접근하도록 한다
-getInstance() 메소드는 위에서 private로 선언한 정적 변수를 리턴한다
-static 메소드는 this를 사용할 수 없다
-static 메소드는 non-static 멤버에 접근할 수 없다




[final]
-final을 앞에 붙이면 필드 값 변경 불가, 클래스 상속 불가, 메소드 오버라이딩 불가


[업캐스팅]
-하위 클래스 객체를 상위 클래스 타입으로 타입 변환
-자동으로  타입 변환이 된다
-바로 위 상위 클래스가 아니더라도 상속 계층에 있다면 자동으로 타입 변환이 가능하다
-다만 같은 상속 트리가 아니라면 불가능

ex)
짱구 a = new 짱구();
사람 b = a; 

[다운캐스팅]
-업캐스팅 시킨 상위 클래스 객체를 하위 클래스 타입으로 타입 변환
-명시적 타입 변환이 필요하다



[객체연산자 Instanceof]
-너는 ~의 객체이니?
-객체의 타입을 식별함
-객체레퍼렌스변수명 instanceof 클래스타입
-true/false 를 리턴한다 
-업캐스팅 레퍼런스가 가리키는 객체의 타입도 알 수있다




[추상클래스]
-추상메소드가 하나라도 있는 클래스
-추상메소드: 구현되지 않은 메소드, body는 없고 prototype만 있는 메소드들 ex) 인터페이스의 default가 붙지 않은 메소드들


[인터페이스]
-인터페이스 타입의 객체 생성은 불가능 하나 인터페이스 타입의 레퍼런스 변수는 선언할 수 있다
-ex) RemoteTest 클래스에서 RemoteRole mr; 선언한 것처럼